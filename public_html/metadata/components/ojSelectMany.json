{
  "name": "oj-select-many",
  "version": "5.2.0",
  "jetVersion": "5.2.0",
  "displayName": "Multi Select",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-form-control-text-align-start"
      ],
      "description": "Aligns the text to the left in ltr and to the right in rtl"
    }
  ],
  "description": "A dropdown list that supports multiple selections and search filtering.",
  "properties": {
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ]
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ]
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ]
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ]
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is null.",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for oj-form-layout element to \nrender help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label. \nIt is what shows up when the user hovers over the help icon, or tabs into the help icon, or press and holds the help icon on a mobile device. No formatted text is available for help definition attribute.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "displayName": "Definition",
          "value": ""
        },
        "source": {
          "description": "Hint for help source URL associated with the label. \nIf present, a help icon will render next to the label. For security reasons we only support urls with protocol http: or https:. If the url doesn't comply we ignore it and throw an error. \nPass in an encoded URL since we do not encode the URL.\n\nSee the help-hints attribute for usage examples.",
          "type": "string",
          "displayName": "Source",
          "value": ""
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true
    },
    "minimumResultsForSearch": {
      "description": "The threshold for showing the search box in the dropdown.",
      "type": "number",
      "displayName": "Minimum Results For Search",
      "value": 15,
      "minimum": 0
    },
    "optionRenderer": {
      "description": "The renderer function that renders the content of each option.",
      "type": "function|null",
      "displayName": "Option Renderer",
      "value": null
    },
    "options": {
      "description": "The option items for the Select.",
      "type": "null|Array<(oj.Option|oj.Optgroup)>|oj.DataProvider<oj.Option>",
      "displayName": "Options",
      "value": null
    },
    "optionsKeys": {
      "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute. When using Typescript, this would result in a compilation error. Best practice is to use a oj.ListDataProviderView with data mapping as a replacement. However, for the app that must fetch data from a REST endpoint where the data fields do not match those that are supported by the options attribute, you may use the options-keys with any dataProvider that implements oj.DataProvider interface.",
      "type": "object",
      "displayName": "Options Keys",
      "properties": {
        "childKeys": {
          "description": "The object for the child keys.",
          "type": "object",
          "displayName": "Child Keys",
          "value": null,
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string"
            },
            "children": {
              "description": "The key name for the children.",
              "type": "string"
            },
            "childKeys": {
              "description": "The object for the child keys.",
              "type": "object"
            }
          }
        },
        "children": {
          "description": "The key name for the children.",
          "type": "string",
          "displayName": "Children",
          "value": null
        },
        "label": {
          "description": "The key name for the label.",
          "type": "string",
          "displayName": "Label",
          "value": null
        },
        "value": {
          "description": "The key name for the value.",
          "type": "string",
          "displayName": "Value",
          "value": null
        }
      }
    },
    "pickerAttributes": {
      "description": "The style attributes for the drop down.",
      "type": "object",
      "displayName": "Picker Attributes",
      "value": null
    },
    "placeholder": {
      "description": "A short hint that can be displayed before user selects a value.",
      "type": "string|null",
      "displayName": "Placeholder",
      "value": null
    },
    "renderMode": {
      "description": "Specifies whether to render select in JET or as a HTML Select tag.",
      "type": "string",
      "displayName": "Render Mode"
    },
    "required": {
      "description": "Specifies whether a value is required.",
      "type": "boolean",
      "displayName": "Required",
      "value": false
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "properties": {
        "filterFurther": {
          "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
          "type": "string",
          "displayName": "Filter Further"
        },
        "moreMatchesFound": {
          "description": "Text for the drop down when more than one options are found.",
          "type": "string",
          "displayName": "More Matches Found"
        },
        "noMatchesFound": {
          "description": "Text for the drop down when no options are found.",
          "type": "string",
          "displayName": "No Matches Found"
        },
        "oneMatchesFound": {
          "description": "Text for the drop down when one option is found.",
          "type": "string",
          "displayName": "One Matches Found"
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "object",
          "displayName": "Required",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Hint"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary"
            }
          }
        },
        "searchField": {
          "description": "Tooltip text for the search box",
          "type": "string",
          "displayName": "Search Field"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "value": {
      "description": "The value of the element.",
      "type": "Array<any>",
      "displayName": "Value",
      "writeback": true
    },
    "valueOptions": {
      "description": "The current values of the element and theirs associated display labels.",
      "type": "null|Array<Object>",
      "displayName": "Value Options",
      "value": null,
      "writeback": true,
      "extension": {
        "vbcs": {
          "itemProperties": {
            "value": {
              "description": "a current value of JET Select",
              "type": "any"
            },
            "label": {
              "description": "display label of value above. If missing, String(value) is used.",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the visual state of the select. JET elements require a refresh() after the DOM is programmatically changed. This method does not accept any arguments."
    },
    "validate": {
      "description": " All messages are cleared, including custom messages added by the app. The implicit required validator is run first if the component is marked required. At the end of validation if there are errors, the messages are shown. If there were no errors, then the value option is updated. ",
      "return": "Promise"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes - \nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be \nerased when this method is called.",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them. \nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages(). \n\nIf there were no deferred messages this method simply returns. \n",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "": {
      "description": "The <oj-select-many> element accepts oj-options as children. See the [oj-option]ojOption doc for details about accepted children and slots.",
      "displayName": "default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}