{
  "name": "oj-train",
  "version": "5.2.0",
  "jetVersion": "5.2.0",
  "displayName": "Train",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-train-stretch"
      ],
      "description": "Optional class that may be added to the train div which will stretch the train to cover the full width of the container specified."
    }
  ],
  "description": "Displays a navigation visual element that allows an application user to go between different steps of a process.",
  "properties": {
    "selectedStep": {
      "description": "Indicates the id of the current selected step.",
      "type": "string",
      "displayName": "Selected Step",
      "writeback": true
    },
    "steps": {
      "description": "The array of step objects.",
      "type": "Array<Object>",
      "displayName": "Steps",
      "required": true,
      "extension": {
        "vbcs": {
          "itemProperties": {
            "id": {
              "description": "string id of the step",
              "type": "string"
            },
            "label": {
              "description": "string label of the step",
              "type": "string"
            },
            "disabled": {
              "description": "boolean indicates whether the step is disabled",
              "type": "boolean"
            },
            "visited": {
              "description": "boolean indicates whether the step has been visited",
              "type": "boolean"
            },
            "messageType": {
              "description": "string the type of message icon displayed on the step",
              "type": "\"info\"|\"error\"|\"fatal\"|\"warning\""
            }
          }
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true
    }
  },
  "methods": {
    "getStep": {
      "description": "Returns the step based on the id passed in.",
      "params": [
        {
          "name": "id",
          "description": "The id of the step.",
          "type": "string"
        }
      ],
      "return": "object|null"
    },
    "getNextSelectableStep": {
      "description": "Returns the id of the next selectable step based on the current selectedStep.",
      "return": "string|null"
    },
    "getPreviousSelectableStep": {
      "description": "Returns the id of the previous selectable step based on the current selectedStep.",
      "return": "string|null"
    },
    "updateStep": {
      "description": "Update the step with the specified id with the provided property bag.",
      "params": [
        {
          "name": "id",
          "description": "The id of the step to update",
          "type": "string"
        },
        {
          "name": "stepProperties",
          "description": "The set of step properties to update. Will overwrite any previously set values.",
          "type": "object",
          "properties": [
            {
              "name": "id",
              "description": "id of step",
              "type": "string",
              "optional": true
            },
            {
              "name": "label",
              "description": "label of step",
              "type": "string",
              "optional": true
            },
            {
              "name": "disabled",
              "description": "whether step is disabled",
              "type": "boolean",
              "optional": true
            },
            {
              "name": "visited",
              "description": "whether step has been visited",
              "type": "boolean",
              "optional": true
            },
            {
              "name": "messageType",
              "description": "type of message displayed",
              "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"",
              "optional": true
            }
          ]
        }
      ],
      "return": "void"
    },
    "refresh": {
      "description": "Refreshes the train.",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojBeforeDeselect": {
      "description": "Triggered immediately before a step is deselected.",
      "cancelable": true,
      "detail": {
        "toStep": {
          "description": "The step that is about to be deselected.",
          "type": "string"
        },
        "fromStep": {
          "description": "The step that is about to be selected.",
          "type": "string"
        }
      }
    },
    "ojDeselect": {
      "description": "Triggered after a step has been deselected.",
      "detail": {
        "toStep": {
          "description": "The step that is about to be deselected.",
          "type": "string"
        },
        "fromStep": {
          "description": "The step that is about to be selected.",
          "type": "string"
        }
      }
    },
    "ojBeforeSelect": {
      "description": "Triggered immediately before a Step is selected.",
      "cancelable": true,
      "detail": {
        "toStep": {
          "description": "The step that is about to be deselected.",
          "type": "string"
        },
        "fromStep": {
          "description": "The step that is about to be selected.",
          "type": "string"
        }
      }
    },
    "ojSelect": {
      "description": "Triggered after a step has been selected.",
      "detail": {
        "toStep": {
          "description": "The step that is about to be deselected.",
          "type": "string"
        },
        "fromStep": {
          "description": "The step that is about to be selected.",
          "type": "string"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}