{
  "name": "oj-time-axis",
  "version": "5.2.0",
  "jetVersion": "5.2.0",
  "displayName": "Time Axis",
  "type": "core",
  "description": "Displays a range of dates based on specified start and end dates and a time scale.",
  "properties": {
    "converter": {
      "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the time axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting. See DateTimeConverterFactory for details on creating built-in datetime converters.",
      "type": "object",
      "displayName": "Converter",
      "value": "{\r           \"default\": null,\r           \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}),\r           \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}),\r           \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}),\r           \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}),\r           \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}),\r           \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}),\r           \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}),\r           \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})\r         }",
      "properties": {
        "default": {
          "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>"
        },
        "seconds": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit, second: 2-digit})"
        },
        "minutes": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit})"
        },
        "hours": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric})"
        },
        "days": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
        },
        "weeks": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
        },
        "months": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
        },
        "quarters": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
        },
        "years": {
          "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
          "type": "oj.Converter<string>",
          "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({year: numeric})"
        }
      }
    },
    "end": {
      "description": "The end time of the time axis. A valid value is required in order for the time axis to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "End",
      "value": "",
      "format": "date-time"
    },
    "scale": {
      "description": "The time scale used for the time axis. This is required in order for the time axis to properly render.",
      "type": "string",
      "displayName": "Scale",
      "value": null,
      "enumValues": [
        "days",
        "hours",
        "minutes",
        "months",
        "quarters",
        "seconds",
        "weeks",
        "years"
      ],
      "propertyEditorValues": {
        "days": {
          "displayName": "Days"
        },
        "hours": {
          "displayName": "Hours"
        },
        "minutes": {
          "displayName": "Minutes"
        },
        "months": {
          "displayName": "Months"
        },
        "quarters": {
          "displayName": "Quarters"
        },
        "seconds": {
          "displayName": "Seconds"
        },
        "weeks": {
          "displayName": "Weeks"
        },
        "years": {
          "displayName": "Years"
        }
      }
    },
    "start": {
      "description": "The start time of the time axis. A valid value is required in order for the time axis to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Start",
      "value": "",
      "format": "date-time"
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component.",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    }
  }
}