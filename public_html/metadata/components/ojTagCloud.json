{
  "name": "oj-tag-cloud",
  "version": "5.2.0",
  "jetVersion": "5.2.0",
  "displayName": "Tag Cloud",
  "type": "core",
  "description": "An interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color.",
  "properties": {
    "animationOnDataChange": {
      "description": "Defines the animation that is applied on data changes.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationOnDisplay": {
      "description": "Defines the animation that is shown on initial display.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "as": {
      "description": "An alias for the $current context variable when referenced inside itemTemplate when using a DataProvider.",
      "type": "string",
      "displayName": "As",
      "value": ""
    },
    "data": {
      "description": "The oj.DataProvider for the tag cloud. It should provide rows where each row corresponds to a single tag cloud item.",
      "type": "oj.DataProvider|null",
      "displayName": "Data",
      "value": null
    },
    "hiddenCategories": {
      "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.",
      "type": "Array<string>",
      "displayName": "Hidden Categories",
      "value": [],
      "writeback": true
    },
    "highlightMatch": {
      "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
      "type": "string",
      "displayName": "Highlight Match",
      "value": "all",
      "enumValues": [
        "all",
        "any"
      ],
      "propertyEditorValues": {
        "all": {
          "displayName": "All"
        },
        "any": {
          "displayName": "Any"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted.",
      "type": "Array<string>",
      "displayName": "Highlighted Categories",
      "value": [],
      "writeback": true
    },
    "hoverBehavior": {
      "description": "Defines the behavior applied when hovering over data items.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "items": {
      "description": "An array of objects with the following properties that defines the data items for the tag cloud items. Also accepts a Promise or callback function for deferred data rendering. The function should return one of the following: Promise: A Promise that will resolve with an array of data items. No data will be rendered if the Promise is rejected. Array: An array of data items. ",
      "type": "Array<Object>|Promise|null",
      "displayName": "Items",
      "value": null,
      "extension": {
        "vbcs": {
          "itemProperties": {
            "categories": {
              "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.",
              "type": "Array<string>"
            },
            "color": {
              "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.",
              "type": "string"
            },
            "id": {
              "description": "The item id should be set by the application if the DataProvider is not being used. The row key will be used as id in the DataProvider case.",
              "type": "any"
            },
            "label": {
              "description": "The text of the item.",
              "type": "string"
            },
            "shortDesc": {
              "description": "The description of the item. This is used for customizing the tooltip text.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the item text.",
              "type": "object"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the item text.",
              "type": "string"
            },
            "url": {
              "description": "The url this item references.",
              "type": "string"
            },
            "value": {
              "description": "The value of this item which will be used to scale its font-size within the tag cloud.",
              "type": "number"
            }
          }
        }
      }
    },
    "layout": {
      "description": "The layout to use for tag display.",
      "type": "string",
      "displayName": "Layout",
      "value": "rectangular",
      "enumValues": [
        "cloud",
        "rectangular"
      ],
      "propertyEditorValues": {
        "cloud": {
          "displayName": "Cloud"
        },
        "rectangular": {
          "displayName": "Rectangular"
        }
      }
    },
    "selection": {
      "description": "An array of id strings, used to define the selected data items.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the tag cloud.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "styleDefaults": {
      "description": "Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. Some property default values come from the CSS and varies based on theme.",
      "type": "object",
      "displayName": "Style Defaults",
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds. The default value comes from the CSS and varies based on theme.",
          "type": "number",
          "displayName": "Animation Duration"
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in ms for highlighting data items.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the items. The default value comes from the CSS and varies based on theme.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {}
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "properties": {
        "renderer": {
          "description": "A callback function that returns a custom tooltip. The callback function will be called with a context object containing information about the item that was clicked.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "properties": {
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The tag cloud element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "label": {
              "description": "The data label of the hovered item.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "value": {
              "description": "The value of the hovered item.",
              "type": "number"
            }
          }
        }
      }
    },
    "touchResponse": {
      "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold \\delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
      "type": "string",
      "displayName": "Touch Response",
      "value": "auto",
      "enumValues": [
        "auto",
        "touchStart"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "touchStart": {
          "displayName": "Touch Start"
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible"
        }
      }
    }
  },
  "methods": {
    "getItem": {
      "description": "Returns an object with the following properties for automation testing verification of the item at the specified index.",
      "params": [
        {
          "name": "index",
          "description": "The index.",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "getItemCount": {
      "description": "Returns the number of items in the tag cloud data.",
      "return": "number"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node,\ndefined as the 'subId' property on the context object. Additional component specific information may also be included.\n\nFor more details on returned objects, see context objects.",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component\nof the change, triggering a [property]Changed event.",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the oj-menu within this element. \nThis is used to designate the JET Menu that this component should launch as a context menu on right-click, Shift-F10, Press & Hold, or component-specific gesture. \nIf specified, the browser's native context menu will be replaced by the JET Menu specified in this slot.\n\nThe application can register a listener for the Menu's ojBeforeOpen event. The listener can cancel the launch via event.preventDefault(), \nor it can customize the menu contents by editing the menu DOM directly, and then calling refresh() on the Menu.\n\nTo help determine whether it's appropriate to cancel the launch or customize the menu, the ojBeforeOpen listener can use component API's to determine which \ntable cell, chart item, etc., is the target of the context menu. See the JSDoc and demos of the individual components for details. \n\nKeep in mind that any such logic must work whether the context menu was launched via right-click, Shift-F10, Press & Hold, or component-specific touch gesture."
    },
    "itemTemplate": {
      "description": " The itemTemplate slot is used to specify the template for creating each item of the tag cloud. The slot must be a <template> element.\nWhen the template is executed for each item, it will have access to the tag cloud's binding context and the following properties:\n\n$current - an object that contains information for the current item\n\nalias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n\n\n\nThe content of the template should only be one <oj-tag-cloud-item> element. See the [oj-tag-cloud-item]ojTagCloudItem doc for more details.",
      "data": {
        "componentElement": {
          "description": "The <oj-tag-cloud> custom element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current item.",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the current item.",
          "type": "number"
        },
        "key": {
          "description": "The key of the current item.",
          "type": "any"
        }
      }
    }
  }
}